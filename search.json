[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "satellite-ground-truthing",
    "section": "",
    "text": "# Install librarian package if you haven't already\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  install.packages(\"librarian\")\n}\nlibrary(librarian)\nshelf(\n  dplyr,\n  here,\n  leaflet\n)\n\n\n  The 'cran_repo' argument in shelf() was not set, so it will use\n  cran_repo = 'https://cran.r-project.org' by default.\n\n  To avoid this message, set the 'cran_repo' argument to a CRAN\n  mirror URL (see https://cran.r-project.org/mirrors.html) or set\n  'quiet = TRUE'.\n\nsource(here(\"./R/dataMunging/nerrs.R\"))\n\n\n  The 'cran_repo' argument in shelf() was not set, so it will use\n  cran_repo = 'https://cran.r-project.org' by default.\n\n  To avoid this message, set the 'cran_repo' argument to a CRAN\n  mirror URL (see https://cran.r-project.org/mirrors.html) or set\n  'quiet = TRUE'.\n\n\nLoad NERRS data\n\ndata &lt;- loadData()\n\n\n# Create a color palette\npal &lt;- colorFactor(palette = \"viridis\", domain = data$occurrenceStatus)\n\n# Create the leaflet map\nleaflet(data) %&gt;%\n  addTiles() %&gt;%\n  addCircleMarkers(\n    ~lon, ~lat,\n    color = ~pal(occurrenceStatus),\n    radius = 5,\n    fillOpacity = 0.8,\n    popup = ~paste(\"Occurrence Status:\", occurrenceStatus)\n  ) %&gt;%\n  addLegend(\n    \"bottomright\", pal = pal, values = ~occurrenceStatus,\n    title = \"Occurrence Status\",\n    opacity = 1\n  )"
  },
  {
    "objectID": "data_sources.html",
    "href": "data_sources.html",
    "title": "Data Soures",
    "section": "",
    "text": "NERRS MCC\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data_sources/nerrs.html",
    "href": "data_sources/nerrs.html",
    "title": "NERRS MCC",
    "section": "",
    "text": "(code) import libraries & functions\nif (!requireNamespace(\"librarian\", quietly = TRUE)) {\n  # If not installed, install the package\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  dplyr,\n  here,\n  ggplot2,\n  ggspatial,\n  glue,\n  jsonlite,\n  leaflet,\n  prettymapr,\n  sf\n)\n\n\n\n\nload the raw data\nyesDF &lt;- read.csv(here(\"data/raw/YES_Mangroves_Rookery.csv\")) %&gt;%\n  select(\".geo\", \"occurrenceStatus\")\nnoDF &lt;- read.csv(here(\"data/raw/NO_Mangroves_Rookery.csv\")) %&gt;%\n  select(\".geo\", \"occurrenceStatus\")\n\n\n\n\nbasic data reshaping\n# merge the no & yes\nmergedDF &lt;- dplyr::full_join(yesDF, noDF, by = c(\".geo\", \"occurrenceStatus\"))\n\n# parse the .geo column\nmergedDF &lt;- mergedDF %&gt;%\n  mutate(\n    coordinates = lapply(`.geo`, function(x) fromJSON(x)$coordinates),\n    lon = sapply(coordinates, function(x) x[1]),\n    lat = sapply(coordinates, function(x) x[2]),\n    coordinates = NULL,  # rm coordinates now that lat, lon extracted\n    `.geo` = NULL  # rm old geom column\n  )\n\n\n\n\nadd some require DwC fields\n# occurrenceID intentionally left out\n# TODO: are these red mangroves or red/white/black all together.\n#       if the latter, eudicots is the taxa that encapsulates all; not helpful. \n# scientificNameID intentionally left out\n# geodeticDatum intentionally left out\n# kingdom intentionally left out\n# countryCode intentionally left out\nmergedDF$basisOfRecord &lt;- \"MachineObservation\"\nmergedDF$eventDate &lt;- \"2022\"  # estimated\nmergedDF$coordinateUncertaintyInMeters &lt;- 2\n# reformat occurrenceStatus [1,0] to [\"present\",\"absent\"]\nmergedDF$occurrenceStatus &lt;- ifelse(mergedDF$occurrenceStatus == 1, 'present', 'absent')\n# TODO: samplingProtocol link here\n# TODO: could use mergedDF$vitality &lt;- \"alive\"\n# TODO: use occurrenceRemarks here?\n\n\n\n\nshow points on map\ndata &lt;- mergedDF\n\n# Define a color palette\npal &lt;- c(\"present\" = \"green\", \"absent\" = \"red\")\n\n# Convert data to sf object\nsf_data &lt;- st_as_sf(data, coords = c(\"lon\", \"lat\"), crs = 4326)\n\n# Create the ggplot\np &lt;- ggplot(data = sf_data) +\n  annotation_map_tile(type = \"osm\") +\n  geom_sf(aes(color = occurrenceStatus), size = 3, alpha = 0.4) +\n  scale_color_manual(values = pal, name = \"Occurrence Status\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottomright\",\n    legend.title = element_text(size = 12),\n    legend.text = element_text(size = 10)\n  ) +\n  ggtitle(\"Occurrence Status Map\")\n\n# Save the plot as a .png image\n# ggsave(\"static_map.png\", plot = p, width = 8, height = 6)\nprint(p)\n\n\nLoading required namespace: raster\n\n\nZoom: 10\n\n\n\n\n\n\n\nwrite reshaped data to file\nwrite.csv(mergedDF, here(\"data/dwc/mangrove.csv\"), row.names = FALSE)"
  }
]